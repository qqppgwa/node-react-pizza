{"version":3,"sources":["page/Menu/Menu.module.css","page/Menu/MenuCell.module.css","page/Menu/MenuCell.jsx","page/Menu/CalcuBar.jsx","page/Menu/Menu.jsx","assets/api.js","page/Order/Order.jsx","page/EditMenu/EditMenu.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","MenuCell","props","console","log","data","className","style","cell","id","flavour","CalcuBar","React","Component","Menu","state","content","caches","keys","then","cacheKeys","axios","method","url","res","price","i","length","key","push","setState","menuCon","board","this","Order","EditMenu","App","useState","exact","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,QAAU,wB,mBCAxDD,EAAOC,QAAU,CAAC,KAAO,yB,wPCYVC,EAVE,SAAAC,GACfC,QAAQC,IAAIF,EAAMG,MAClB,IAAMA,EAAOH,EAAMG,KACnB,OACE,yBAAKC,UAAWC,IAAMC,MACpB,2BAAIH,EAAKI,IACT,2BAAIJ,EAAKK,W,kCCCAC,G,kBAPb,aAAe,uE,sEAIb,OAAO,kC,GALYC,IAAMC,YCkEdC,E,YA9Db,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,QAAS,IAHC,E,iFAMO,IAAD,OAClBC,OAAOC,OAAOC,MAAK,SAASC,GAC1BjB,QAAQC,IAAIgB,MAEd,IAAIJ,EAAU,GCVaK,IAAM,CACjCC,OAAQ,MACRC,IAAK,WACL,eAAgB,qBDQNJ,MAAK,SAAAK,GAMb,IAJA,IAAInB,EAAO,CACT,CAAEI,GAAI,EAAGC,QAAS,YAAae,MAAO,QACtC,CAAEhB,GAAI,EAAGC,QAAS,SAAUe,MAAO,QAE5BC,EAAI,EAAGA,EAAIrB,EAAKsB,OAAQD,IAAK,CACpCvB,QAAQC,IAAIC,EAAKsB,QACjB,IAAInB,EAAO,kBAAC,EAAD,CAAUH,KAAMA,EAAKqB,GAAIE,IAAKF,IACzCV,EAAQa,KAAKrB,GACbL,QAAQC,IAAIY,GAEd,EAAKc,SAAS,CAAEd,QAASA,S,+BAI3B,OACE,yBAAKV,UAAWC,IAAMwB,SACpB,yBAAKzB,UAAWC,IAAMyB,OAAQC,KAAKlB,MAAMC,SACzC,+BACE,kBAAC,EAAD,Y,GAhCSJ,IAAMC,WEDVqB,EAHD,SAAAhC,GACZ,OAAO,+BCEMiC,EAHE,SAAAjC,GACf,OAAO,+B,sBCmGMkC,MA/FH,WAAO,IAAD,EACcC,mBAAS,MADvB,gCAEoBA,oBAAS,IAF7B,gCAGMA,mBAAS,aAHf,6BA0BhB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAI,KAAnB,UAGA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAI,UAAnB,QAGA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAI,aAAnB,SAIF,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW3B,IAC3B,kBAAC,IAAD,CAAO0B,KAAK,SAASC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAK,YAAYC,UAAWN,QCrCzBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,SD6H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.32db5f45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Menu_board__19mwG\",\"menuCon\":\"Menu_menuCon__3z9k-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"MenuCell_cell__2m1-9\"};","import React from 'react'\r\nimport style from './MenuCell.module.css'\r\n// import { getMenu } from '../../assets/api'\r\nconst MenuCell = props => {\r\n  console.log(props.data)\r\n  const data = props.data\r\n  return (\r\n    <div className={style.cell}>\r\n      <p>{data.id}</p>\r\n      <p>{data.flavour}</p>\r\n    </div>\r\n  )\r\n}\r\nexport default MenuCell\r\n","import React from 'react'\r\nimport style from './calcuBar.module.css'\r\nclass CalcuBar extends React.Component {\r\n  constructor() {\r\n    super()\r\n  }\r\n  render() {\r\n    return <div></div>\r\n  }\r\n}\r\nexport default CalcuBar\r\n","import React from 'react'\r\nimport MenuCell from './MenuCell.jsx'\r\nimport style from './Menu.module.css'\r\nimport { getMenu } from '../../assets/api'\r\nimport Calcubar from './CalcuBar.jsx'\r\nclass Menu extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      content: []\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    caches.keys().then(function(cacheKeys) {\r\n      console.log(cacheKeys) // ex: [\"test-cache\"]\r\n    })\r\n    let content = []\r\n    getMenu().then(res => {\r\n      // console.log(res.data.data)\r\n      let data = [\r\n        { id: 1, flavour: 'meat love', price: '10.9' },\r\n        { id: 2, flavour: 'hawaii', price: '9.9' }\r\n      ]\r\n      for (let i = 0; i < data.length; i++) {\r\n        console.log(data.length)\r\n        let cell = <MenuCell data={data[i]} key={i} />\r\n        content.push(cell)\r\n        console.log(content)\r\n      }\r\n      this.setState({ content: content })\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={style.menuCon}>\r\n        <div className={style.board}>{this.state.content}</div>\r\n        <aside>\r\n          <Calcubar />\r\n        </aside>\r\n      </div>\r\n    )\r\n    // getMenu().then(res => {\r\n    //   // console.log(res.data.data)\r\n    //   let data = [{ id: 1, flavour: 'meat love', price: '10.9' }]\r\n    //   for (let i = 0; i < data.length; i++) {\r\n    //     console.log(data.length)\r\n    //     let cell = <MenuCell data={data[i]} index={i} />\r\n    //     content.push(cell)\r\n    //     console.log(content)\r\n    //   }\r\n    // })\r\n  }\r\n}\r\n// const Menu = props => {\r\n//   let content = []\r\n// getMenu().then(res => {\r\n//   // console.log(res.data.data)\r\n//   let data = [{ id: 1, flavour: 'meat love', price: '10.9' }]\r\n//   for (let i = 0; i < data.length; i++) {\r\n//     console.log(data.length)\r\n//     let cell = <MenuCell data={data[i]} index={i} />\r\n//     content.push(cell)\r\n//     console.log(content)\r\n//   }\r\n// })\r\n\r\n// return <div>{content}</div>\r\n// }\r\nexport default Menu\r\n","import axios from 'axios';\r\n// const apiKey = 'IGLOYrMAV8KRjzGzj6vvF3dGx2WlASHZ'\r\n// const getImg = axios.create({\r\n//     baseURL: 'https://api.giphy.com/v1'\r\n// });\r\n// const searchPrefix='https://api.giphy.com/v1/gifs/search?api_key=IGLOYrMAV8KRjzGzj6vvF3dGx2WlASHZ&';\r\nexport const getMenu = data => axios({\r\n    method: 'get',\r\n    url: '/getMenu',\r\n    'Content-Type': 'application/json',\r\n});\r\n// export const apiImgId = data => getImg.get(`/gifs?api_key=${apiKey}&ids=${data.ids}`);","import React from 'react'\r\nconst Order = props => {\r\n  return <div></div>\r\n}\r\nexport default Order\r\n","import React from 'react'\r\nconst EditMenu = props => {\r\n  return <div></div>\r\n}\r\nexport default EditMenu\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport Menu from './page/Menu/Menu.jsx'\r\nimport Order from './page/Order/Order.jsx'\r\nimport EditMenu from './page/EditMenu/EditMenu.jsx'\r\nimport './App.css'\r\nimport { HashRouter, Route, NavLink, Switch } from 'react-router-dom'\r\nconst App = () => {\r\n  const [message, setMessage] = useState(null)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const [url, setUrl] = useState('/getMenu')\r\n  // const fetchData = useCallback(() => {\r\n  //   fetch(url)\r\n  //     .then(response => {\r\n  //       if (!response.ok) {\r\n  //         throw new Error(`status ${response.status}`)\r\n  //       }\r\n  //       return response.json()\r\n  //     })\r\n  //     .then(json => {\r\n  //       setMessage(json.data[0])\r\n  //       setIsFetching(false)\r\n  //     })\r\n  //     .catch(e => {\r\n  //       setMessage(`API call failed: ${e}`)\r\n  //       setIsFetching(false)\r\n  //     })\r\n  // }, [url])\r\n  // useEffect(() => {\r\n  //   setIsFetching(true)\r\n  //   fetchData()\r\n  // }, [fetchData])\r\n  // console.log(message)\r\n  return (\r\n    <HashRouter>\r\n      <nav>\r\n        <NavLink exact to={'/'}>\r\n          search\r\n        </NavLink>\r\n        <NavLink exact to={'/order'}>\r\n          oder\r\n        </NavLink>\r\n        <NavLink exact to={'/editMenu'}>\r\n          edit\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route path=\"/\" component={Menu} />\r\n          <Route path=\"/order\" component={Order} />\r\n          <Route path=\"/editMenu\" component={EditMenu} />\r\n        </Switch>\r\n      </main>\r\n    </HashRouter>\r\n  )\r\n}\r\nfunction App2() {\r\n  // const [message, setMessage] = useState(null)\r\n  // const [isFetching, setIsFetching] = useState(false)\r\n  // const [url, setUrl] = useState('/hi')\r\n  // const fetchData = useCallback(() => {\r\n  //   fetch(url)\r\n  //     .then(response => {\r\n  //       if (!response.ok) {\r\n  //         throw new Error(`status ${response.status}`)\r\n  //       }\r\n  //       return response.json()\r\n  //     })\r\n  //     .then(json => {\r\n  //       setMessage(json.data[0].type)\r\n  //       setIsFetching(false)\r\n  //     })\r\n  //     .catch(e => {\r\n  //       setMessage(`API call failed: ${e}`)\r\n  //       setIsFetching(false)\r\n  //     })\r\n  // }, [url])\r\n  // useEffect(() => {\r\n  //   setIsFetching(true)\r\n  //   fetchData()\r\n  // }, [fetchData])\r\n  // console.log(message)\r\n  // return (\r\n  //   <div className=\"App\">\r\n  //     <header className=\"App-header\">\r\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n  //       <p>\r\n  //         Edit <code> src / App.js </code> and save to reload.{' '}\r\n  //       </p>{' '}\r\n  //       <p>\r\n  //         {' '}\r\n  //         {'« '} <strong> {isFetching ? 'Fetching message from API' : message} </strong> {' »'}{' '}\r\n  //       </p>{' '}\r\n  //       <p> </p>{' '}\r\n  //       <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n  //         Learn React{' '}\r\n  //       </a>{' '}\r\n  //     </header>{' '}\r\n  //   </div>\r\n  // )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}